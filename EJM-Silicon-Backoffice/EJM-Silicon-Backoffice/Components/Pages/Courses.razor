@page "/courses"

@using Microsoft.AspNetCore.Authorization
@using EJMSiliconBackoffice.Models
@using System.Text.Json

@inject HttpClient Http
@rendermode InteractiveServer

@* @attribute [Authorize] *@

<section class="courses">
<div class="container">
    <a class="add-course" href="/courses/addcourse">Add a new course</a>
    <div class="navigationContainer">
        <nav class="navigation">
            <a href="/"><i class="fa-solid fa-house"></i> Home </a>
            <p> >> </p>
            <a class="link-active" href="/courses"> Handle Courses </a>
        </nav>
    </div>
    <div class="header">
        <h1>Courses</h1>
    </div>
    <div class="items">
        @if (courses == null)
        {
            <div><i class="fa-sharp fa-solid fa-spinner-third fa-spin"></i></div>
        }
        else
        {
            @foreach (var item in courses)
            {
                var link = $"courses/editcourse/{item.Id}";
                <div class="course-wrapper">
                    <div class="course">
                        <img class="course-image" src="/images/courses/@item.ImageUri" alt="" />
                        <div class="content">
                            <h2>@item.Title</h2>
                            @if (item.Author != null)
                            {
                                <p>By @item.Author</p>
                            }
                            else
                            {
                                <p>By @item.Author</p>
                            }

                            <div class="course-buttons">
                                <a class="btn-edit" href="@link">Edit</a>
                                <button onclick="@(() => DeleteCourseAsync(item.Id!))" class="btn-del">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>
</section>

@code {
    private List<CourseModel>? courses;

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQLQuery { Query = "{ getCourses { id title imageUri authors {name} }}" };
        var response = await Http.PostAsJsonAsync("https://courseprovider-ejm.azurewebsites.net/api/graphql?code=WFw9JlFcINQqtM1YeOLUAd6wpm5rJ8i5ajIxp__0mVnUAzFuengWgw%3D%3D", query);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            courses = result?.Data.GetProperty("getCourses").EnumerateArray()
            .Select(course => new CourseModel
                {
                    Id = course.GetProperty("id").GetString(),
                    ImageUri = course.GetProperty("imageUri").GetString() ?? string.Empty,
                    Title = course.GetProperty("title").GetString() ?? string.Empty,
                    Author = (course.GetProperty("authors").ValueKind == JsonValueKind.Array && course.GetProperty("authors").GetArrayLength() > 0)
                    ? course.GetProperty("authors")[0].GetProperty("name").GetString() ?? "Default Teacher"
                    : "Default Teacher",
                })
            .ToList();
        }
    }

    public async Task DeleteCourseAsync(string courseId)
    {
        var mutation = new GraphQLQuery
        {
            Query = $"mutation {{ deleteCourse(id: \"{courseId}\") }}"
        };

        var response = await Http.PostAsJsonAsync("https://courseprovider-ejm.azurewebsites.net/api/graphql?code=WFw9JlFcINQqtM1YeOLUAd6wpm5rJ8i5ajIxp__0mVnUAzFuengWgw%3D%3D", mutation);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            var success = result?.Data.GetProperty("deleteCourse").GetBoolean();
            if (success == true)
            {
                var courseToRemove = courses?.FirstOrDefault(c => c.Id == courseId);
                if (courseToRemove != null)
                {
                    courses!.Remove(courseToRemove);
                    StateHasChanged(); // Notify the framework to re-render the UI
                }
            }
        }
    }
}
