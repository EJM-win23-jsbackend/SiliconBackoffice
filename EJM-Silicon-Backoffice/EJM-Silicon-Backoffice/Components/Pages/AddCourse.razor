@page "/courses/addcourse"
@using Microsoft.AspNetCore.Authorization
@using EJMSiliconBackoffice.Models
@using System.Text.Json
@using System.Net.Http.Json
@using System.Text

@inject HttpClient Http
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

@* @attribute [Authorize] *@

@if(errorMessage != null)
{
    <div>
        <span class="error">@errorMessage</span>
    </div>
}
<EditForm FormName="AddCourse" Model="newCourse" OnValidSubmit="AddCourseAsync">
    <div class="AddCourseForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="title">Title:</label>
        <InputText class="input" @bind-Value="newCourse.Title" />
    </div>

    <div class="form-group form-check">
        <InputCheckbox class="input" @bind-Value="newCourse.IsBestSeller" />
        <label class="form-check-label" for="isBestSeller">Is Best Seller</label>
    </div>

    <div class="form-group form-check">
        <InputCheckbox class="input" @bind-Value="newCourse.IsDigital" />
        <label class="form-check-label" for="isDigital">Is Digital</label>
    </div>

    <div class="form-group">
        <label for="imageUri">Image URI:</label>
        <InputText class="input" id="imageUri" @bind-Value="newCourse.ImageUri" />
    </div>

    <div class="form-group">
        <label for="imageHeaderUri">Image Header URI:</label>
        <InputText class="input" id="imageHeaderUri" @bind-Value="newCourse.ImageHeaderUri" />
    </div>

    <div class="form-group">
        <label for="starRating">Star Rating:</label>
        <InputText class="input" id="starRating" @bind-Value="newCourse.StarRating" />
    </div>

    <div class="form-group">
        <label for="reviews">Reviews:</label>
        <InputText class="input" id="reviews" @bind-Value="newCourse.Reviews" />
    </div>

    <div class="form-group">
        <label for="likesInProcent">Likes In Percent:</label>
        <InputText class="input" id="likesInProcent" @bind-Value="newCourse.LikesInProcent" />
    </div>

    <div class="form-group">
        <label for="likes">Likes:</label>
        <InputText class="input" id="likes" @bind-Value="newCourse.Likes" />
    </div>

    <div class="form-group">
        <label for="hours">Hours:</label>
        <InputText class="input" id="hours" @bind-Value="newCourse.Hours" />
    </div>

    <div class="form-group">
        <label for="currency">Currency:</label>
        <InputText class="input" id="currency" @bind-Value="newCourse.Prices.Currency" />
    </div>

    <div class="form-group">
        <label for="price">Price:</label>
        <InputText class="input" id="price" @bind-Value="newCourse.Prices.Price" />
    </div>

    <div class="form-group">
        <label for="discount">Discount:</label>
        <InputText class="input" id="discount" @bind-Value="newCourse.Prices.Discount" />
    </div>

    <div class="form-group">
        <label for="description">Description:</label>
        <InputText class="input" id="description" @bind-Value="newCourse.Content.Description" />
    </div>

    <div class="form-group">
        <label for="categories">Categories:</label>
        <InputText class="input" @bind-Value="newCategory" />
        <button type="button" class="btn btn-primary" @onclick="AddCategory">Add Category</button>
    </div>

    <div class="form-group">
        <label for="includes">Includes:</label>
        <InputText class="input" @bind-Value="newInclude" />
        <button type="button" class="btn btn-primary" @onclick="AddInclude">Add Include</button>
    </div>

    <div class="form-group">
        <label for="learning">Learnings:</label>
        <InputText class="input" @bind-Value="newLearning" />
        <button type="button" class="btn btn-primary" @onclick="AddLearning">Add Learning</button>
    </div>


    <div class="form-group">
        <label for="authors">Authors:</label>
        @foreach (var author in newCourse.Authors)
        {
            <div>
                <InputText class="form-course" @bind-Value="author.Name" placeholder="Author Name" />
                <InputText class="form-course" @bind-Value="author.AuthorImage" placeholder="Author Image URI" />
            </div>
        }
        <button type="button" class="btn btn-primary" @onclick="AddAuthor">Add Author</button>
    </div>

    <div class="form-group">
        <label for="programDetails">Program Details:</label>
        @foreach (var programDetail in newCourse.Content.ProgramDetails)
        {
            <div>
                <InputText class="form-course" @bind-Value="programDetail.Title" placeholder="Program Detail Title" />
                <InputTextArea class="form-course" @bind-Value="programDetail.Description" placeholder="Program Detail Description" />
            </div>
        }
        <button class="btn btn-primary" type="button" @onclick="AddProgramDetail">Add Program Detail</button>
    </div>


    <button type="submit" class="btn btn-primary">Add Course</button>
    </div>
</EditForm>

@code {
    public AddAndEditCourseModel newCourse { get; set; } = new AddAndEditCourseModel
        {
            Content = new Content
            {
                ProgramDetails = new List<ProgramDetailItem>(),
                Learning = new string[0],
                Includes = new string[0]
            },
        };

    public string? newLearning { get; set; } = "";

    public string? newCategory { get; set; } = "";

    public string? newInclude { get; set; } = "";

    private string? errorMessage { get; set; }

    private async Task AddCourseAsync()
    {
        if(newCourse.Title != null)
        {
            var mutation = new
            {
                query = @"
            mutation($course: CourseCreateRequestInput!) {
                createCourse(input: $course) {
                    title
                    isDigital
                    isBestSeller
                    imageUri
                    imageHeaderUri
                    categories
                    starRating
                    reviews
                    likesInProcent 
                    likes 
                    hours
                    authors {
                        id
                        name
                        authorImage
                    }
                    prices 
                    {
                        currency
                        price
                        discount
                    }
                    content {
                        description
                        learning
                        includes
                        programDetails {
                            id
                            title
                            description
                        }
                    }
        }
    }",
                variables = new
                {
                    course = new
                    {
                        title = newCourse?.Title ?? "Default Title",
                        isDigital = newCourse?.IsDigital ?? false,
                        isBestSeller = newCourse?.IsBestSeller ?? false,
                        imageUri = newCourse?.ImageUri ?? string.Empty,
                        imageHeaderUri = newCourse?.ImageHeaderUri ?? string.Empty,
                        categories = newCourse?.Categories ?? new[] { "Default Category" },
                        starRating = newCourse?.StarRating ?? "0",
                        reviews = newCourse?.Reviews ?? "0",
                        likesInProcent = newCourse?.LikesInProcent ?? "0%",
                        likes = newCourse?.Likes ?? "0",
                        hours = newCourse?.Hours ?? "0",
                        authors = newCourse?.Authors?.Select(a => new
                        {
                            id = a.Id,
                            name = a.Name ?? "Unknown Author",
                            authorImage = a.AuthorImage ?? string.Empty
                        }).ToArray(),
                        prices = new
                        {
                            currency = newCourse?.Prices?.Currency ?? "USD",
                            price = newCourse?.Prices?.Price ?? "0",
                            discount = newCourse?.Prices?.Discount ?? "0"
                        },
                        content = new
                        {
                            description = newCourse?.Content?.Description ?? string.Empty,
                            learning = newCourse?.Content?.Learning ?? new[] { "Default Value" },
                            includes = newCourse?.Content?.Includes ?? new[] { "Default Value" },
                            programDetails = newCourse?.Content?.ProgramDetails?.Select(pd => new
                            {
                                id = pd.Id,
                                title = pd.Title ?? "No Title",
                                description = pd.Description ?? "No Description",
                               
                            }).ToArray()
                        }
                    }
                }
            };

            var content = new StringContent(JsonSerializer.Serialize(mutation), Encoding.UTF8, "application/json");

            try
            {
                var response = await Http.PostAsync("https://courseprovider-ejm.azurewebsites.net/api/graphql?code=WFw9JlFcINQqtM1YeOLUAd6wpm5rJ8i5ajIxp__0mVnUAzFuengWgw%3D%3D", content);

                if (response.IsSuccessStatusCode)
                {
                    NavigationManager.NavigateTo("/courses");
                }
                else
                {
                    var errorResponse = await response.Content.ReadAsStringAsync();
                    errorMessage = $"There was an error adding the course: {errorResponse}";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Exception: {ex.Message}";
            }
        }


    }

    private void AddAuthor()
    {
        newCourse.Authors.Add(new Author());
    }

    private void RemoveAuthor(Author author)
    {
        newCourse.Authors.Remove(author);
    }

    private void AddProgramDetail()
    {
        newCourse.Content.ProgramDetails.Add(new ProgramDetailItem());
    }

    private void RemoveProgramDetail(ProgramDetailItem programDetail)
    {
        newCourse.Content.ProgramDetails.Remove(programDetail);
    }

    private void AddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategory))
        {
            var categories = newCourse.Categories.ToList();
            categories.Add(newCategory);
            newCourse.Categories = categories.ToArray();
            newCategory = string.Empty;
        }
    }

    private void AddInclude()
    {
        if (!string.IsNullOrWhiteSpace(newInclude))
        {
            var includes = newCourse?.Content?.Includes?.ToList();
            includes.Add(newInclude);
            newCourse.Content.Includes = includes.ToArray();
            newInclude = string.Empty;
        }
    }

    private void AddLearning()
    {
        if (!string.IsNullOrWhiteSpace(newLearning))
        {
            var learning = newCourse?.Content?.Learning?.ToList();
            learning.Add(newLearning);
            newCourse.Content.Learning = learning.ToArray();
            newLearning = string.Empty;
        }
    }
}
