@page "/courses/addcourse"
@using Microsoft.AspNetCore.Authorization
@using EJMSiliconBackoffice.Models
@using System.Text.Json
@using System.Net.Http.Json
@using System.Text

@inject HttpClient Http
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

@* @attribute [Authorize] *@

<section class="container center">
    <EditForm FormName="AddCourse" Model="newCourse" OnValidSubmit="AddCourseAsync">
        <DataAnnotationsValidator />

        <div class="metadata-container">
            <div class="ImageHeadlineContainer">
                <h1 class="h1-courses">Add a course</h1>
                <p class="underline">Here you can add a new course to the database. The course must have an auhtor and a title.</p>
            </div>

            <div class="add-author-container">
                    @foreach (var author in newCourse.Authors)
                    {
                        <div class="add-author-container-child">
                            <InputText class="input" @bind-Value="author.Name" placeholder="Author Name" />
                            <InputText class="input" @bind-Value="author.AuthorImage" placeholder="Author Image URI" />
                            <button type="button" class="Mybtn btn-red" @onclick="() => RemoveAuthor(author)">Remove Author</button>
                        </div>
                    }
                    <button type="button" class="Mybtn btn-theme" @onclick="AddAuthor">Add Author</button>
            </div>

            <h5 class="h5">Metadata:</h5>
            <div class="metadata-form-parent-container">

                @if (errorMessage != null)
                {
                    <div>
                        <span class="error">@errorMessage</span>
                    </div>
                }

                <div class="metadata-form-container">
                    <div class="metadata-content">
                        <label for="">Add image-url:</label>
                        <InputText class="input" @bind-Value="newCourse.ImageUri" />
                    </div>
                    <div class="metadata-content">
                        <label>Add image-url for header pricture:</label>
                        <InputText class="input" @bind-Value="newCourse.ImageHeaderUri" />
                    </div>
                    <div class="metadata-content">
                        <label>Likes in procent:</label>
                        <InputText class="input" @bind-Value="newCourse.LikesInProcent" />
                    </div>
                    <div class="metadata-content">
                        <label>Likes in numbers:</label>
                        <InputText class="input" @bind-Value="newCourse.Likes" />
                    </div>
                    <div class="metadata-content">
                        <label>Hours:</label>
                        <InputText class="input" @bind-Value="newCourse.Hours" />
                    </div>
                    <div class="metadata-content">
                        <label>Number stars: (max: 5)</label>
                        <InputText class="input" @bind-Value="newCourse.StarRating" />
                    </div>
                    <div class="metadata-content">
                        <label>Number of reviews:</label>
                        <InputText class="input" @bind-Value="newCourse.Reviews" />
                    </div>
                    <div class="metadata-content">
                        <label>Course underline: (max: 100 signs)</label>
                        <InputText class="input" @bind-Value="newCourse.Ingress" />
                    </div>
                    <div class="metadata-checkbox">
                        <div class="metadata-checkbox-child">
                            <label>Is digital:</label>
                            <InputCheckbox @bind-Value="newCourse.IsDigital" />
                        </div>
                        <div class="metadata-checkbox-child">
                            <label>Is best seller:</label>
                            <InputCheckbox @bind-Value="newCourse.IsBestSeller" />
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="create-category">
            <div class="metadata-checkbox">
                <label for="categories">Categories:</label>
                <div class="metadata-checkbox-child">
                    <InputText class="input" @bind-Value="newCategory" />
                    <button type="button" class="Mybtn btn-theme" @onclick="AddCategory">Add</button>
                </div>
            </div>
            <div class="categories-container">
                @if (newCourse.Categories != null)
                {
                    <div class="categories">
                        @foreach (var category in newCourse.Categories)
                        {
                            <div class="each-category">
                                <span>@category</span>
                                <button type="button" class="Mybtn btn-red" @onclick="() => RemoveCategory(category)">Remove</button>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <div class="Create-course">
            <div class="line"></div>

            <div class="courseDescription-container">
                <h5 class="h5">Headline and ingress:</h5>
                <div class="course-description-form">
                    <div class="course-form-components">
                        <label for="title">Enter the title of the course here: (Max 200 signs):</label>
                        <InputText id="title" @bind-Value="newCourse.Title" class="HeadLine input" />
                        <ValidationMessage class="error" For="@(() => newCourse.Title)" />
                    </div>
                    <div class="course-form-components">
                        <label for="description">Enter a description of the course (Max 1000 signs):</label>
                        <InputTextArea id="description" class="input" @bind-Value="newCourse.Content.Description" />
                    </div>
                </div>
            </div>

            <div class="whatYouLearn-Container">
                <h5 class="h5">What you'll learn:</h5>

                @if(newCourse.Content.Learning != null)
                {

                    @foreach(var learnItem in newCourse.Content.Learning)
                    {
                        <div class="ul">
                            <div class="whatYouLearn-item-container">
                                <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M10.0001 1.66666C5.40508 1.66666 1.66675 5.40499 1.66675 9.99999C1.66675 14.595 5.40508 18.3333 10.0001 18.3333C14.5951 18.3333 18.3334 14.595 18.3334 9.99999C18.3334 5.40499 14.5951 1.66666 10.0001 1.66666ZM10.0001 16.6667C6.32425 16.6667 3.33341 13.6758 3.33341 9.99999C3.33341 6.32416 6.32425 3.33332 10.0001 3.33332C13.6759 3.33332 16.6667 6.32416 16.6667 9.99999C16.6667 13.6758 13.6759 16.6667 10.0001 16.6667Z" fill="#6366F1" />
                                    <path d="M8.33249 11.3225L6.41666 9.40999L5.23999 10.59L8.33416 13.6775L13.9225 8.08916L12.7442 6.91083L8.33249 11.3225Z" fill="#6366F1" />
                                </svg>
                                <p class="p">@learnItem</p>
                                <button type="button" class="Mybtn btn-red" @onclick="() => RemoveLearnItem(learnItem)">Remove item</button>
                            </div>
                        </div>
                    }
                }

                <div class="course-description-form">
                    <InputText class="input" @bind-Value="newLearning" />
                    <button type="button" class="Mybtn btn-theme" @onclick="AddLearning">Add Learning</button>
                </div>
            </div>

            <div class="addCourse-container">
                <h5 class="h5">Course includes:</h5>

                @foreach(var include in newCourse.Content.Includes)
                {
                    <div class="ul">

                            <div class="containerContent">
                            <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M10.0001 1.66666C5.40508 1.66666 1.66675 5.40499 1.66675 9.99999C1.66675 14.595 5.40508 18.3333 10.0001 18.3333C14.5951 18.3333 18.3334 14.595 18.3334 9.99999C18.3334 5.40499 14.5951 1.66666 10.0001 1.66666ZM10.0001 16.6667C6.32425 16.6667 3.33341 13.6758 3.33341 9.99999C3.33341 6.32416 6.32425 3.33332 10.0001 3.33332C13.6759 3.33332 16.6667 6.32416 16.6667 9.99999C16.6667 13.6758 13.6759 16.6667 10.0001 16.6667Z" fill="#6366F1" />
                                <path d="M8.33249 11.3225L6.41666 9.40999L5.23999 10.59L8.33416 13.6775L13.9225 8.08916L12.7442 6.91083L8.33249 11.3225Z" fill="#6366F1" />
                            </svg>
                                @include
                            </div>
                            <button type="button" class="Mybtn btn-red" @onclick="() => DeleteInclude(include)">Remove item</button>
                    </div>
                }


                <div class="add-includes-container">
                        <label>Add a "course-include":</label>
                        <InputText class="input" @bind-Value="newInclude" />
                        <button type="button" class="Mybtn btn-theme" @onclick="AddInclude">Add Include</button>
                </div>
                <div class="course-form-price">
                    <div class="course-form-price-components">
                        <label for="price">Enter a price:</label>
                        <InputText @bind-Value="newCourse.Prices.Price" class="input price-input" />
                    </div>
                    <div class="course-form-price-components">
                        <label>Enter a discount price:</label>
                        <InputText @bind-Value="newCourse.Prices.Discount" class="input price-input " />
                    </div>
                    <div class="course-form-price-components">
                        <label>Enter currency sign (e.g. $, €, kr):</label>
                        <InputText @bind-Value="newCourse.Prices.Currency" class="input price-input" />
                    </div>
                </div>

                <button class="Mybtn btn-Add" type="submit">Add Course</button>

            </div>



        </div>

        <div class="programDetails-container">
            <div class="HeadlineProgramDetails">
                <div class="addCourse-container">
                    <h5 class="h5">Program Details:</h5>
                </div>
                <div class="programdetails-form">
                    <label for="programDetails">Write down course details:</label>
                    @foreach (var programDetail in newCourse.Content.ProgramDetails)
                    {
                        <div>
                            <InputText class="input" @bind-Value="programDetail.Title" placeholder="Program Detail Title" />
                            <InputTextArea class="input" @bind-Value="programDetail.Description" placeholder="Program Detail Description" />
                                <button type="button" class="Mybtn btn-red" @onclick="() => RemoveProgramDetail(programDetail)">Remove detail</button>
                        </div>
                    }
                    <button class="Mybtn btn-theme" type="button" @onclick="AddProgramDetail">Add Program Detail</button>
                </div>
            </div>
        </div>
    </EditForm>
</section>














@* @if(errorMessage != null)
{
    <div>
        <span class="error">@errorMessage</span>
    </div>
}
<EditForm FormName="AddCourse" Model="newCourse" OnValidSubmit="AddCourseAsync">
    <div class="AddCourseForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label class="form-label" for="title">Title:</label>
        <InputText class="InputText" @bind-Value="newCourse.Title" />
    </div>

    <div class="form-group form-check">
        <InputCheckbox class="InputText" @bind-Value="newCourse.IsBestSeller" />
        <label class="form-check-label" for="isBestSeller">Is Best Seller</label>
    </div>

    <div class="form-group form-check">
        <InputCheckbox class="InputText" @bind-Value="newCourse.IsDigital" />
        <label class="form-check-label" for="isDigital">Is Digital</label>
    </div>

    <div class="form-group">
                <label class="form-label" for="imageUri">Image URI:</label>
        <InputText class="InputText" id="imageUri" @bind-Value="newCourse.ImageUri" />
    </div>

    <div class="form-group">
                <label class="form-label" for="imageHeaderUri">Image Header URI:</label>
        <InputText class="InputText" id="imageHeaderUri" @bind-Value="newCourse.ImageHeaderUri" />
    </div>

    <div class="form-group">
                <label class="form-label" for="starRating">Star Rating:</label>
        <InputText class="InputText" id="starRating" @bind-Value="newCourse.StarRating" />
    </div>

    <div class="form-group">
        <label for="reviews">Reviews:</label>
        <InputText class="InputText" id="reviews" @bind-Value="newCourse.Reviews" />
    </div>

    <div class="form-group">
        <label for="likesInProcent">Likes In Percent:</label>
        <InputText class="InputText" id="likesInProcent" @bind-Value="newCourse.LikesInProcent" />
    </div>

    <div class="form-group">
        <label for="likes">Likes:</label>
        <InputText class="InputText" id="likes" @bind-Value="newCourse.Likes" />
    </div>

    <div class="form-group">
        <label for="hours">Hours:</label>
        <InputText class="InputText" id="hours" @bind-Value="newCourse.Hours" />
    </div>

    <div class="form-group">
        <label for="currency">Currency:</label>
        <InputText class="InputText" id="currency" @bind-Value="newCourse.Prices.Currency" />
    </div>

    <div class="form-group">
        <label for="price">Price:</label>
        <InputText class="InputText" id="price" @bind-Value="newCourse.Prices.Price" />
    </div>

    <div class="form-group">
        <label for="discount">Discount:</label>
        <InputText class="InputText" id="discount" @bind-Value="newCourse.Prices.Discount" />
    </div>

    <div class="form-group">
        <label for="description">Description:</label>
        <InputText class="InputText" id="description" @bind-Value="newCourse.Content.Description" />
    </div>

    <div class="form-group">
        <label for="categories">Categories:</label>
        <InputText class="InputText" @bind-Value="newCategory" />
        <button type="button" class="btn btn-primary" @onclick="AddCategory">Add Category</button>
    </div>

    <div class="form-group">
        <label for="includes">Includes:</label>
        <InputText class="InputText" @bind-Value="newInclude" />
        <button type="button" class="btn btn-primary" @onclick="AddInclude">Add Include</button>
    </div>

    <div class="form-group">
        <label for="learning">Learnings:</label>
        <InputText class="InputText" @bind-Value="newLearning" />
        <button type="button" class="btn btn-primary" @onclick="AddLearning">Add Learning</button>
    </div>


    <div class="form-group">
        <label for="authors">Authors:</label>
        @foreach (var author in newCourse.Authors)
        {
            <div>
                <InputText class="form-course" @bind-Value="author.Name" placeholder="Author Name" />
                <InputText class="form-course" @bind-Value="author.AuthorImage" placeholder="Author Image URI" />
            </div>
        }
        <button type="button" class="btn btn-primary" @onclick="AddAuthor">Add Author</button>
    </div>

    <div class="form-group">
        <label for="programDetails">Program Details:</label>
        @foreach (var programDetail in newCourse.Content.ProgramDetails)
        {
            <div>
                <InputText class="form-course" @bind-Value="programDetail.Title" placeholder="Program Detail Title" />
                <InputTextArea class="form-course" @bind-Value="programDetail.Description" placeholder="Program Detail Description" />
            </div>
        }
        <button class="btn btn-primary" type="button" @onclick="AddProgramDetail">Add Program Detail</button>
    </div>


    <button type="submit" class="btn btn-primary">Add Course</button>
    </div>
</EditForm> *@

@code {
    public AddAndEditCourseModel newCourse { get; set; } = new AddAndEditCourseModel
        {
            Content = new Content
            {
                ProgramDetails = new List<ProgramDetailItem>(),
                Learning = new string[0],
                Includes = new string[0]
            },
        };

    public string? newLearning { get; set; } = "";

    public string? newCategory { get; set; } = "";

    public string? newInclude { get; set; } = "";

    private string? errorMessage { get; set; }

    private async Task AddCourseAsync()
    {
        if(newCourse.Authors.Count() != 0)
        {
            var mutation = new
            {
                query = @"
            mutation($input: CourseCreateRequestInput!) {
                createCourse(input: $input) {
                    title
                    isDigital
                    isBestSeller
                    imageUri
                    imageHeaderUri
                    categories
                    starRating
                    reviews
                    likesInProcent
                    likes
                    hours
                    authors {
                        id
                        name
                        authorImage
                    }
                    prices {
                        currency
                        price
                        discount
                    }
                    content {
                        description
                        learning
                        includes
                        programDetails {
                            id
                            title
                            description
                        }
                    }
                }
            }",
                variables = new
                {
                    input = new
                    {
                        title = newCourse?.Title ?? "Default Title",
                        isDigital = newCourse?.IsDigital ?? false,
                        isBestSeller = newCourse?.IsBestSeller ?? false,
                        imageUri = newCourse?.ImageUri ?? string.Empty,
                        imageHeaderUri = newCourse?.ImageHeaderUri ?? string.Empty,
                        categories = newCourse?.Categories ?? new[] { "Default Category" },
                        starRating = newCourse?.StarRating ?? "0",
                        reviews = newCourse?.Reviews ?? "0",
                        likesInProcent = newCourse?.LikesInProcent ?? "0%",
                        likes = newCourse?.Likes ?? "0",
                        hours = newCourse?.Hours ?? "0",
                        authors = newCourse?.Authors?.Select(a => new
                        {
                            id = a.Id,
                            name = a.Name ?? "Unknown Author",
                            authorImage = a.AuthorImage ?? string.Empty
                        }).ToArray(),
                        prices = new
                        {
                            currency = newCourse?.Prices?.Currency ?? "USD",
                            price = newCourse?.Prices?.Price ?? "0",
                            discount = newCourse?.Prices?.Discount ?? "0"
                        },
                        content = new
                        {
                            description = newCourse?.Content?.Description ?? string.Empty,
                            learning = newCourse?.Content?.Learning ?? new[] { "Default Value" },
                            includes = newCourse?.Content?.Includes ?? new[] { "Default Value" },
                            programDetails = newCourse?.Content?.ProgramDetails?.Select(pd => new
                            {
                                id = pd.Id,
                                title = pd.Title ?? "No Title",
                                description = pd.Description ?? "No Description"
                            }).ToArray()
                        }
                    }
                }
            };

            var content = new StringContent(JsonSerializer.Serialize(mutation), Encoding.UTF8, "application/json");

            try
            {
                var response = await Http.PostAsync("https://courseprovider-ejm.azurewebsites.net/api/graphql?code=WFw9JlFcINQqtM1YeOLUAd6wpm5rJ8i5ajIxp__0mVnUAzFuengWgw%3D%3D", content);

                if (response.IsSuccessStatusCode)
                {
                    NavigationManager.NavigateTo("/courses");
                }
                else
                {
                    var errorResponse = await response.Content.ReadAsStringAsync();
                    errorMessage = $"There was an error adding the course: {errorResponse}";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Exception: {ex.Message}";
            }
        }
        else if(newCourse.Authors == null)

        errorMessage = "You must add an author!";
    }

    private void AddAuthor()
    {
        newCourse.Authors.Add(new Author());
    }

    private void RemoveAuthor(Author author)
    {
        newCourse.Authors.Remove(author);
    }

    private void AddProgramDetail()
    {
        newCourse.Content.ProgramDetails.Add(new ProgramDetailItem());
    }

    private void RemoveProgramDetail(ProgramDetailItem programDetail)
    {
        newCourse.Content.ProgramDetails.Remove(programDetail);
    }


    private void AddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategory))
        {
            var categories = newCourse.Categories.ToList();
            categories.Add(newCategory);
            newCourse.Categories = categories.ToArray();
            newCategory = string.Empty;
        }
    }

    private void AddInclude()
    {
        if (!string.IsNullOrWhiteSpace(newInclude))
        {
            var includes = newCourse?.Content?.Includes?.ToList();
            includes.Add(newInclude);
            newCourse.Content.Includes = includes.ToArray();
            newInclude = string.Empty;
        }
    }

    private void DeleteInclude(string include)
    {
        if (!string.IsNullOrWhiteSpace(include))
        {
            var includes = newCourse?.Content?.Includes?.ToList();
            includes.Remove(include);
            newCourse.Content.Includes = includes.ToArray();
            newInclude = string.Empty;
        }
    }


    private void AddLearning()
    {
        if (!string.IsNullOrWhiteSpace(newLearning))
        {
            var learning = newCourse?.Content?.Learning?.ToList();
            learning.Add(newLearning);
            newCourse.Content.Learning = learning.ToArray();
            newLearning = string.Empty;
        }
    }

    private void RemoveLearnItem(string learnItem)
    {
        if (!string.IsNullOrWhiteSpace(learnItem))
        {
            var learning = newCourse?.Content?.Learning?.ToList();
            learning.Remove(learnItem);
            newCourse.Content.Learning = learning.ToArray();
            newLearning = string.Empty;
        }
    }

    private void RemoveCategory(string category)
    {
        if (!string.IsNullOrWhiteSpace(category))
        {
            var learning = newCourse?.Categories.ToList();
            learning.Remove(category);
            newCourse.Categories = learning.ToArray();
            newCategory = string.Empty;
        }
    }
}
